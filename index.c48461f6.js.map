{"mappings":"2EA0CeA,GACb,GAAW,MAAPA,EAEF,OAAO,EAET,IAEIC,EAFAC,EAAM,EAGV,GAFAF,WArCiCA,GAEjC,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IACV,KAAjBH,EAAIK,OAAOF,KAEZH,EAAMM,EAAUN,EAAIG,EAAE,MAEJ,KAAjBH,EAAIK,OAAOF,IAAgC,KAAnBH,EAAIK,OAAOF,EAAE,KAEtCH,EAAMM,EAAUN,EAAIG,EAAE,KACtBH,EAAMM,EAAUN,EAAIG,EAAE,EAAE,MAG5B,OAAOH,EAwBDO,CAA0BP,GAEnB,KAAVA,EAAI,GACP,CACE,IAAMQ,EAAeR,EAAIS,MAAM,KAC/BT,EAAMQ,EAAa,GAAGE,WACtBT,EAAiBU,EAAU,aA3BAX,GAE7B,IAIIY,EAJAC,EAAsBb,EAAIc,OAAO,EAAGd,EAAII,OAAO,GAC/CW,EAAQF,EAAoBC,OAAO,EAAGD,EAAoBT,OAAO,GACjEY,EAAQ,IAAIC,OAAO,MACjBC,EAAWH,EAAMN,MAAMO,GAE7BJ,EAAcM,EAAS,GAAGR,WAC1B,IAAI,IAAIP,EAAE,EAAGA,EAAEe,EAASd,OAAOD,IAE7BS,EAAcA,EAAc,IAAMM,EAASf,GAAGO,WAEhD,OAAOE,EAe4BO,CAAsBX,EAAa,GAAGE,iBAGvET,EAAiBU,EAInB,IAFA,IAAIK,EAAQ,IAAIC,OAAOhB,GACjBiB,EAAWlB,EAAIS,MAAMO,GAClBb,EAAI,EAAGA,EAAIe,EAASd,OAAQD,IAAK,CACxC,GAA0B,GAAtBiB,MAAMF,EAASf,IAEjB,MAAO,mBAET,IAAIkB,EAAMC,SAASJ,EAASf,IACzBkB,EAAK,MAENnB,GAAOmB,GAGX,OAAOnB,GAvET,IAAIS,EAAU,CAAC,IAAI,KAAKY,KAAK,cAKpBjB,EAAUN,EAAIwB,EAAMC,GAC3B,OAAGD,EAAQxB,EAAII,OAAO,EAAUJ,EACzBA,EAAI0B,UAAU,EAAEF,GAASC,EAAMzB,EAAI0B,UAAUF,EAAM,GCN5D,IAAIG,EAAMC,SAASC,cAAc,WAC3BC,EAASF,SAASC,cAAc,cAEhCE,EAAMH,SAASC,cAAc,cAGnCC,EAAOE,iBAAiB,SAAS,SAACC,GAChCA,EAAMC,iBAEN,IAAIC,GAAS,EAAGC,EAAAC,OAAMV,EAAIW,OAC1BP,EAAIQ,UAAY,MAAQJ,EAAY","sources":["src/sumador.js","src/presenter.js"],"sourcesContent":["\nlet cadenas = [\",\",\"-\"].join(\"|\")\n\n//cuantificador (*, ?, +, {m,n})  no funciona en regex, se arreglara la que se usa que es *\n\n\nfunction setCharAt(str,index,chr) { //cambia 1 por 1 las variables que no entren en sintax de regex\n  if(index > str.length-1) return str;\n  return str.substring(0,index) + chr + str.substring(index+1);\n}\n\nfunction cambiarCuantificadorRegex(str) //esta funcion nos cambia los cuantificadores regex que no funcionan en sintaxis\n{\n  for (let i = 0; i < str.length; i++) {\n    if(str.charAt(i) == \"*\")\n    {\n      str = setCharAt(str,i,'-')\n    }\n    if(str.charAt(i) == \"]\" && str.charAt(i+1) == \"[\") //cambiamos de paso la manera que se ve con multiples delimitadores para evitar problemas de regex\n    {\n      str = setCharAt(str,i,',') //lo volvemos doble comilla para que sea mas sencillo separarlos\n      str = setCharAt(str,i+1,',')\n    }\n  }\n  return str\n}\n\nfunction aumentarDelimitadores(str)\n{\n  let cadenaDelimitadores = str.substr(0, str.length-1); //quitamos la parte final ]\n  let delim = cadenaDelimitadores.substr(3, cadenaDelimitadores.length-3); //quitamos la parte inicial //[\n  var regex = new RegExp(\",,\"); //cambiamos los [] por ,, para regex\n  const splitArr = delim.split(regex);\n  let muchosDelim\n  muchosDelim = splitArr[0].toString() //si solo hay 1 array terminara aca\n  for(let i=1; i<splitArr.length;i++)\n  {\n    muchosDelim = muchosDelim + \"|\" + splitArr[i].toString() //si hay muchos split ira guardando en un string cada variable\n  }\n  return muchosDelim\n}\n\nfunction sumar(str) {\n  if (str == null)\n  {\n    return 0\n  }\n  let tot = 0\n  str = cambiarCuantificadorRegex(str) //cambia el delimitador si tuviera un cuantificador no aceptable por regex\n  let cadenasUsuario\n  if(str[0] == \"/\") // si hay algo al principio entonces dividiremos el string en dos, donde hay delimitadores y donde hay numeros\n  {\n    const parteNumeros = str.split(\" \");\n    str = parteNumeros[1].toString(); //agarramos la parte de los numeros\n    cadenasUsuario = cadenas + \"|\" + aumentarDelimitadores(parteNumeros[0].toString()) //agarramos la parte de los delimitadores\n  }\n  else{\n    cadenasUsuario = cadenas //si no hay delimitadores entrara aca\n  }\n  var regex = new RegExp(cadenasUsuario); //encontramos los delimitadores con regex\n  const splitArr = str.split(regex); //nos divide las cadenas con los delimitadores que tenemos\n  for (let i = 0; i < splitArr.length; i++) {\n    if (isNaN(splitArr[i]) == true) //si hay una cadena que no mostramos como delimitador\n    {\n      return \"cadena no valida\"\n    }\n    let num = parseInt(splitArr[i]); //nos devuelve la cadena como numero, no como string\n    if(num <1000)\n    {\n      tot += num\n    }\n  }\n  return tot\n}\n\nexport {sumar};\n","import {sumar} from \"./sumador.js\";\n\nlet cad = document.querySelector(\"#cadena\");\nconst button = document.querySelector(\"#addButton\");\n\nconst res = document.querySelector(\"#resultado\");\n\n\nbutton.addEventListener(\"click\", (event) => {\n  event.preventDefault();\n  \n  let respuesta = sumar(cad.value)\n  res.innerHTML = \"<p>\" + respuesta + \"</p>\" \n});\n"],"names":["str","cadenasUsuario","tot","i","length","charAt","setCharAt","cambiarCuantificadorRegex","parteNumeros","split","toString","cadenas","muchosDelim","cadenaDelimitadores","substr","delim","regex","RegExp","splitArr","aumentarDelimitadores","isNaN","num","parseInt","join","index","chr","substring","cad","document","querySelector","button","res","addEventListener","event","preventDefault","respuesta","$dbddc33e466ab005$exports","sumar","value","innerHTML"],"version":3,"file":"index.c48461f6.js.map"}